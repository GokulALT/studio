// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Harvest data analysis flow. Analyzes harvest data and rainfall data
 * to provide harvest recommendations, considering historical and seasonal variations.
 *
 * - analyzeHarvestData - Function to trigger the harvest data analysis flow.
 * - AnalyzeHarvestDataInput - Input type for analyzeHarvestData.
 * - AnalyzeHarvestDataOutput - Output type for analyzeHarvestData.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeHarvestDataInputSchema = z.object({
  harvestData: z
    .string()
    .describe(
      'Harvest data including coconut count, total weight per harvest, sales price, and date of harvest.'
    ),
  rainfallData: z
    .string()
    .describe('Rainfall data including rainfall amount and date.'),
  customIntervals: z
    .string()
    .optional()
    .describe('Custom harvest intervals defined by the user.'),
});
export type AnalyzeHarvestDataInput = z.infer<typeof AnalyzeHarvestDataInputSchema>;

const AnalyzeHarvestDataOutputSchema = z.object({
  recommendations: z
    .string()
    .describe(
      'Recommendations for when to harvest, taking into account historical and seasonal variations, to optimize harvest timings.'
    ),
  seasonalVariations: z
    .string()
    .describe('Analysis of seasonal variations affecting harvest yields.'),
  historicalTrends: z
    .string()
    .describe('Analysis of historical trends in harvest data.'),
});

export type AnalyzeHarvestDataOutput = z.infer<typeof AnalyzeHarvestDataOutputSchema>;

export async function analyzeHarvestData(input: AnalyzeHarvestDataInput): Promise<AnalyzeHarvestDataOutput> {
  return analyzeHarvestDataFlow(input);
}

const analyzeHarvestDataPrompt = ai.definePrompt({
  name: 'analyzeHarvestDataPrompt',
  input: {schema: AnalyzeHarvestDataInputSchema},
  output: {schema: AnalyzeHarvestDataOutputSchema},
  prompt: `You are an expert agricultural advisor, specializing in coconut harvests.

Analyze the provided harvest data, rainfall data, and custom harvest intervals (if provided) to provide recommendations on when to harvest, taking into account historical and seasonal variations, to optimize harvest timings.

Consider the following factors:
- Historical trends in harvest yields.
- Seasonal variations in coconut production.
- The impact of rainfall on harvest yields.
- Any custom harvest intervals defined by the user.

Harvest Data: {{{harvestData}}}
Rainfall Data: {{{rainfallData}}}
Custom Harvest Intervals: {{{customIntervals}}}

Based on this analysis, provide clear and actionable recommendations for optimizing harvest timings, as well as detailed explanations of seasonal variations and historical trends.

Output should contain harvest timing recommendations, seasonal variations and historical trends.`,
});

const analyzeHarvestDataFlow = ai.defineFlow(
  {
    name: 'analyzeHarvestDataFlow',
    inputSchema: AnalyzeHarvestDataInputSchema,
    outputSchema: AnalyzeHarvestDataOutputSchema,
  },
  async input => {
    const {output} = await analyzeHarvestDataPrompt(input);
    return output!;
  }
);
